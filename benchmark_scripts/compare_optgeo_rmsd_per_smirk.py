import os
import pickle
import numpy as np

import matplotlib
matplotlib.use('Agg')
from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.pyplot as plt


def read_pickle_data(fnm):
    """
    Read data from pickled file generated by plot_optgeo_each_smirks.py

    The content of the pickle file:
    data_save = {
        'ffxml': args.ffxml,
        'tmp_folder': tmp_folder,
        'iter_folder': iter_folder,
        'data_qm_v_mm': data_qm_v_mm,
    }

    The main content is in data_qm_v_mm
    data_qm_v_mm[fftype][sid] = [
        {
            'mol2_fnm': mol2_fnm,
            'atom_indices': atom_indices,
            'smirks': smirks,
            'id': sid,
            'qm': qm,
            'mm': mm,
            'mm_iter0': None or mm of iter0,
        },
        ...
    ]
    """
    print(f'reading saved data from {fnm}')
    with open(fnm, 'rb') as pfile:
        data_save = pickle.load(pfile)
        data_qm_v_mm = data_save['data_qm_v_mm']
    return data_qm_v_mm

def compute_rmsd(ref_data_list, target_data_list):
    a = np.array(ref_data_list)
    b = np.array(target_data_list)
    rmsd = np.sqrt(np.sum((a-b)**2) / len(a))
    return rmsd

def aggregate_compare_rmsd_data(orig_data, new_data):
    agg_data = {}
    for fftype in orig_data:
        agg_data[fftype] = []
        for sid in sorted(orig_data[fftype], key=lambda s: int(s[1:] if s[-1].isdigit() else s[1:-1])):
            # aggregate orig and new rmsd data into lists
            qm_list = [d['qm'] for d in orig_data[fftype][sid]]
            mm_orig_list = [d['mm'] for d in orig_data[fftype][sid]]
            mm_new_list = [d['mm'] for d in new_data[fftype][sid]]
            orig_rmsd = compute_rmsd(qm_list, mm_orig_list)
            new_rmsd = compute_rmsd(qm_list, mm_new_list)
            agg_data[fftype].append({
                'sid': sid,
                'orig_rmsd': orig_rmsd,
                'new_rmsd': new_rmsd,
            })
    return agg_data

def plot_compare_rmsd_smirks(agg_data, fnm='compare_optgeo_rmsd.pdf'):
    """ Generate bar plots for comparing benchmark results """
    xlabels = {
        'bonds': 'Bond Length RMSD (Angstrom)',
        'angles': 'Bond Angles RMSD (Degrees)',
        'propertorsions': 'Torsion Angles RMSD (Degrees)',
        'impropertorsions': 'Improper Torsion Angles RMSD (Degrees)'
    }
    with PdfPages(fnm) as pdf:
        for fftype, sid_data_list in agg_data.items():
            sid_list = [d['sid'] for d in sid_data_list]
            orig_rmsd_array = np.array([d['orig_rmsd'] for d in sid_data_list])
            new_rmsd_array = np.array([d['new_rmsd'] for d in sid_data_list])
            rmsd_changes = new_rmsd_array - orig_rmsd_array
            # make plot
            n = len(sid_list)
            y_pos = np.arange(n)
            plt.figure(figsize=(8.5, n*0.12+1.2))
            # plot the initial rmsd
            plt.barh(y_pos, orig_rmsd_array, tick_label=sid_list, height=0.8, color='C0', align='center')
            # plot the changes in different colors
            increase_idxs = np.nonzero(rmsd_changes >=0)[0]
            decrease_idxs = np.nonzero(rmsd_changes <0)[0]
            plt.barh(y_pos[increase_idxs], rmsd_changes[increase_idxs], left=orig_rmsd_array[increase_idxs], height=0.6, color='C3', align='center')
            plt.barh(y_pos[decrease_idxs], rmsd_changes[decrease_idxs], left=orig_rmsd_array[decrease_idxs], height=0.6, color='C2', align='center')
            # adjust the y range, and invert the yaxis
            #plt.ylim(y_pos[0]-1, y_pos[-1]+1)
            plt.ylim(y_pos[-1]+1, y_pos[0]-1)
            # adjust the x range
            xmin = 0
            xmax = max(orig_rmsd_array.max(), new_rmsd_array.max())
            padding = (xmax - xmin) * 0.01
            plt.xlim(xmin, xmax+padding)
            plt.xlabel(xlabels[fftype.lower()])
            # save
            plt.title(f'RMSD comparison for {fftype}')
            plt.tight_layout()
            pdf.savefig()  # saves the current figure into a pdf page
            plt.close()
    print(f"RMSD compare plots saved as {fnm}")

def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('orig_data_pickle', help='pickled data from orig evaluation')
    parser.add_argument('new_data_pickle', help='pickled data from new evaluation')
    args = parser.parse_args()

    orig_data = read_pickle_data(args.orig_data_pickle)
    new_data = read_pickle_data(args.new_data_pickle)

    agg_data = aggregate_compare_rmsd_data(orig_data, new_data)

    plot_compare_rmsd_smirks(agg_data)

if __name__ == "__main__":
    main()